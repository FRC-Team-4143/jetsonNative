// RobotBuilder Version: 6.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.SerialPort;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import com.kauailabs.navx.frc.AHRS;
import com.ctre.phoenix.motorcontrol.*;
import com.ctre.phoenix.motorcontrol.can.*;
import edu.wpi.first.math.controller.*;

import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import edu.wpi.first.math.kinematics.DifferentialDriveKinematics;
import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.math.kinematics.DifferentialDriveWheelSpeeds;
import edu.wpi.first.wpilibj.smartdashboard.Field2d;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.kinematics.DifferentialDriveOdometry;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX motorController1;
    private WPI_TalonSRX motorController2;
    private DifferentialDrive differentialDrive1;
    AHRS ahrs;
    double velocity1;
    double velocity2;
    double position1;
    double position2;
    double navxangle;
    double startangle;
    double startdistance;
    double currentspdl;
    double currentspdr;
    ChassisSpeeds chassisSpeeds;
    DifferentialDriveKinematics kinematics;
    Pose2d m_pose;
    private final Field2d m_field = new Field2d();

    private final DifferentialDriveOdometry m_odometry;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        motorController1 = new WPI_TalonSRX(2);
        addChild("Motor Controller 1", motorController1);
        motorController1.setInverted(false);
        motorController1.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative);

        motorController2 = new WPI_TalonSRX(3);
        addChild("Motor Controller 2", motorController2);
        motorController2.setInverted(true);
        motorController2.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative);

        differentialDrive1 = new DifferentialDrive(motorController1, motorController2);
        addChild("Differential Drive 1", differentialDrive1);
        differentialDrive1.setSafetyEnabled(true);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(1.0);
        ahrs = new AHRS(SerialPort.Port.kUSB);
        SmartDashboard.putData("Field", m_field);
        
        m_odometry =
        new DifferentialDriveOdometry(
            Rotation2d.fromDegrees(-ahrs.getAngle()), position1, position2);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {

        navxangle = ahrs.getAngle();

        SmartDashboard.putNumber("angle", ahrs.getAngle());

        // This method will be called once per scheduler run
        velocity1 = -motorController1.getSelectedSensorVelocity(0);
        velocity1 = velocity1 * 10 / 4096 * 4 * 3.1415926 / 39.37;
        SmartDashboard.putNumber("vel1 (m/s)", velocity1);
        velocity2 = -motorController2.getSelectedSensorVelocity(0);
        velocity2 = velocity2 * 10 / 4096 * 4 * 3.1415926 / 39.37;
        // 4096 is the counts
        // 10 converts .1sec to sec
        // 4 in diameter
        // pi
        // in to meter conversion
        SmartDashboard.putNumber("vel2 (m/s)", velocity2);
        position1 = motorController1.getSelectedSensorPosition(0);
        position1 = -position1 / 4096 * 4 * 3.1415926 / 39.37;
        SmartDashboard.putNumber("pos1 (m)", position1);
        position2 = motorController2.getSelectedSensorPosition(0);
        position2 = -position2 / 4096 * 4 * 3.1415926 / 39.37;
        SmartDashboard.putNumber("pos2 (m)", position2); 
        m_pose = m_odometry.update(
        Rotation2d.fromDegrees(-ahrs.getAngle()), position1, position2);
        m_field.setRobotPose(m_odometry.getPoseMeters());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public Command arcadeDriveCommand(DoubleSupplier fwd, DoubleSupplier rot) {
        // A split-stick arcade command, with forward/backward controlled by the left
        // hand, and turning controlled by the right.
        return run(() -> differentialDrive1.arcadeDrive(fwd.getAsDouble(), rot.getAsDouble()))
                .withName("arcadeDrive");
    }

    public Command arcadeDriveCommand(double fwd, double rot) {
        return run(() -> differentialDrive1.arcadeDrive(fwd, rot))
                .withName("arcadeDrive");
    }

    public Command zeroCommand() {
        return runOnce(() -> {
            //motorController1.setSelectedSensorPosition(0);
            currentspdl = 0;
            currentspdr = 0;
            startdistance = position1;
            //motorController2.setSelectedSensorPosition(0);
        })
                .withName("Zero").ignoringDisable(true);
    }

    public Command ZeroGyro() {
        return this.runOnce(() -> {
            //ahrs.reset();
            startangle=navxangle;
    
        })
                .withName("gyroZero").ignoringDisable(true);
    }

    public Command driveDistance(double dist) {
        BooleanSupplier distReached = () -> position1 > dist + startdistance;
        return run(() -> {
            differentialDrive1.arcadeDrive(0.5, 0.0);
        })
                .until(distReached);
    }

    public Command driveAngle(double angle) {
        BooleanSupplier angleReached = () -> navxangle > angle + startangle;
        return run(() -> {
            differentialDrive1.arcadeDrive(0.0, -0.5);
        })
                .until(angleReached);
    }
    
    public Command drivePIDCommand(double speedL, double speedR, double accel, double dist) {
    PIDController pidL = new PIDController(0.4, 0, 0);
    PIDController pidR = new PIDController(0.4, 0, 0);
    BooleanSupplier distReached = () -> position1 > dist + startdistance;
    
    return run(() -> {
        if (currentspdl < speedL) currentspdl += accel/50;
        if (currentspdr < speedR) currentspdr += accel/50;
        motorController1.set(pidL.calculate(velocity1, currentspdl)+currentspdl/3.0);
        motorController2.set(pidR.calculate(velocity2 , currentspdr)+currentspdr/3.0);
        }).withName("PID").until(distReached);
  }
}

