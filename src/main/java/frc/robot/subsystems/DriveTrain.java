// RobotBuilder Version: 6.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj2.command.Command;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;

import com.ctre.phoenix.motorcontrol.*;
import com.ctre.phoenix.motorcontrol.can.*;

import java.util.function.DoubleSupplier;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.controller.SimpleMotorFeedforward;
import edu.wpi.first.math.filter.SlewRateLimiter;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX motorController1;
    private WPI_TalonSRX motorController2;
    private DifferentialDrive differentialDrive1;
    AHRS ahrs;
    double velocity1;
    double velocity2;
    double position1;
    double position2;
    PIDController leftPID;
    PIDController rightPID;
    SimpleMotorFeedforward feedforward;
    SlewRateLimiter accelLimitLeft;
    SlewRateLimiter accelLimitRight;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        motorController1 = new WPI_TalonSRX(2);
        addChild("Motor Controller 1", motorController1);
        motorController1.setInverted(false);
        motorController1.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative);
        motorController2 = new WPI_TalonSRX(3);
        addChild("Motor Controller 2", motorController2);
        motorController2.setInverted(true);
        motorController2.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative);
        differentialDrive1 = new DifferentialDrive(motorController1, motorController2);
        addChild("Differential Drive 1", differentialDrive1);
        differentialDrive1.setSafetyEnabled(true);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(1.0);
        ahrs = new AHRS(SerialPort.Port.kUSB);
        feedforward = new SimpleMotorFeedforward(0, 1 / 3.2, 0);
        leftPID = new PIDController(0.3, 0, 0);
        rightPID = new PIDController(.3, 0, 0);
        accelLimitLeft = new SlewRateLimiter(.05, -0.5, 0);
        accelLimitRight = new SlewRateLimiter(.05, -0.5, 0);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        SmartDashboard.putNumber("angle", ahrs.getAngle());

        velocity1 = -(4 * 3.141 * .0254 / 4096) * 10 * motorController1.getSelectedSensorVelocity(0);
        SmartDashboard.putNumber("vel1", velocity1);
        velocity2 = -(4 * 3.141 * .0254 / 4096) * 10 * motorController2.getSelectedSensorVelocity(0);
        SmartDashboard.putNumber("vel2", velocity2);

        position1 = -(4 * 3.141 * .0254 / 4096) * motorController1.getSelectedSensorPosition(0);
        SmartDashboard.putNumber("pos1", position1);
        position2 = -(4 * 3.141 * .0254 / 4096) * motorController2.getSelectedSensorPosition(0);
        SmartDashboard.putNumber("pos2", position2);

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public Command arcadeDriveCommand(DoubleSupplier fwd, DoubleSupplier rot) {
        // A split-stick arcade command, with forward/backward controlled by the left
        // hand, and turning controlled by the right.
        return run(() -> differentialDrive1.arcadeDrive(fwd.getAsDouble(), rot.getAsDouble()))
                .withName("arcadeDrive");
    }

    public Command arcadeDriveCommand(double fwd, double rot) {
        // A split-stick arcade command, with forward/backward controlled by the left
        // hand, and turning controlled by the right.
        return run(() -> differentialDrive1.arcadeDrive(fwd, rot))
                .withName("arcadeDrive");
    }

    public Command pidDriveCommand(double leftVelocitySetpoint, double rightVelocitySetpoint) {
        accelLimitLeft.reset(0);
        accelLimitRight.reset(0);
        System.out.println("jimmy");
        return run(() -> {
            double leftSkew = accelLimitLeft.calculate(leftVelocitySetpoint);
            double rightSkew = accelLimitRight.calculate(rightVelocitySetpoint);
            SmartDashboard.putNumber("skew", leftSkew);
            motorController1.set(feedforward.calculate(leftSkew)
                    + leftPID.calculate(velocity1, leftSkew));
            motorController2.set(feedforward.calculate(rightSkew)
                    + rightPID.calculate(velocity2, rightSkew));
        })
                .withName("pidDrive");
    }

    public Command ZeroCommand() {
        return this.runOnce(() -> {
            motorController1.setSelectedSensorPosition​(0, 0, 10);
            motorController2.setSelectedSensorPosition​(0, 0, 10);
        })
                .withName("wheels0").ignoringDisable(true);
    }

    public Command ZeroGyro() {
        return this.runOnce(() -> {
            ahrs.reset();
        })
                .withName("gyroZero").ignoringDisable(true);
    }

}
