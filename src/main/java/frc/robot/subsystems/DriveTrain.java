// RobotBuilder Version: 6.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.math.controller.*;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;

import com.ctre.phoenix.motorcontrol.*;
import com.ctre.phoenix.motorcontrol.can.*;

import java.util.function.DoubleSupplier;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.SerialPort;



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX motorController1;
private WPI_TalonSRX motorController2;
private DifferentialDrive differentialDrive1;
AHRS ahrs;
double velocity1;
double velocity2;
double position1;
double position2;




    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
motorController1 = new WPI_TalonSRX(2);
 addChild("Motor Controller 1",motorController1);
 motorController1.setInverted(false);
motorController1.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative);
motorController2 = new WPI_TalonSRX(3);
 addChild("Motor Controller 2",motorController2);
 motorController2.setInverted(true);
motorController2.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative);
differentialDrive1 = new DifferentialDrive(motorController1, motorController2);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);

ahrs = new AHRS(SerialPort.Port.kUSB); /* Alternatives:  SPI.Port.kMXP, I2C.Port.kMXP or SerialPort.Port.kUSB */


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
velocity1 = -motorController1.getSelectedSensorVelocity(0);
velocity1 = velocity1 * 10 / 4096 * Math.PI * 0.1016;
				SmartDashboard.putNumber("vel1", velocity1);
                velocity2 = -motorController2.getSelectedSensorVelocity(0);
                velocity2 = velocity2 * 10 / 4096 * Math.PI * 0.1016;
				SmartDashboard.putNumber("vel2", velocity2);
                
                
                position1 = -motorController1.getSelectedSensorPosition(0);
position1 = position1 / 4096 * Math.PI * 0.1016;
				SmartDashboard.putNumber("pos1", position1);
                
                position2 = -motorController2.getSelectedSensorPosition(0);
position2 = position2 / 4096 * Math.PI * 0.1016;
				SmartDashboard.putNumber("pos2", position2);
                // 4 inches is 0.1016 meters
                SmartDashboard.putNumber("angle", ahrs.getAngle());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public Command arcadeDriveCommand(DoubleSupplier fwd, DoubleSupplier rot) {
    // A split-stick arcade command, with forward/backward controlled by the left
    // hand, and turning controlled by the right.
    return run(() -> differentialDrive1.arcadeDrive(fwd.getAsDouble(), rot.getAsDouble()))
        .withName("arcadeDrive");
  }
  
  
  
  //forward drive
  public Command forwardDriveCommand(double speed, double rot) {
     return run(() -> differentialDrive1.arcadeDrive(speed, rot))
        .withName("forwardDrive");
  }
  
  //turn
  public Command drivePIDCommand(double speedL, double speedR) {
    PIDController pidL = new PIDController(0.4, 0, 0);
    PIDController pidR = new PIDController(0.4, 0, 0);
    return run(() -> {motorController1.set(pidL.calculate(velocity1, speedL)+speedL/3.5);
        motorController2.set(pidR.calculate(velocity2 , speedR)+speedR/3.5);})
        .withName("Turn");
  }
  
  

public Command resetWheelPositionCommand(){
   
    return runOnce(() ->  {motorController1.setSelectedSensorPosition(0);
    motorController2.setSelectedSensorPosition(0);})
        .withName("resetWheelPosition").ignoringDisable(true);
}

public Command resetAngleCommand(){
   
    return runOnce(() ->  {ahrs.reset();})
        .withName("resetAngle").ignoringDisable(true);
}
}

